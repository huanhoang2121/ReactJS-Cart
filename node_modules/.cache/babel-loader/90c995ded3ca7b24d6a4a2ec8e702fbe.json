{"ast":null,"code":"var _jsxFileName = \"/home/dev/Documents/shoping-cart/src/containers/CartContainer.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport Carts from \"./../components/Carts\";\nimport Cart from \"./../components/Cart\";\nimport * as Message from \"./../constants/Message\";\nimport PropTypes from \"prop-types\";\n\nclass CartContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.showCart = cart => {\n      var result = Message.MSG_CART_EMPTY;\n\n      if (cart.length > 0) {\n        result = cart.map((cart, index) => {\n          return React.createElement(Cart, {\n            key: index,\n            cart: cart,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 22\n            },\n            __self: this\n          });\n        });\n      }\n\n      return result;\n    };\n  }\n\n  render() {\n    var cart = this.props.cart;\n    return React.createElement(Carts, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, this.showCart(cart));\n  }\n\n}\n\nCartContainer.propTypes = {\n  cart: PropTypes.arrayOf(PropTypes.shape({\n    product: PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      image: PropTypes.string.isRequired,\n      description: PropTypes.string.isRequired,\n      price: PropTypes.number.isRequired,\n      inventory: PropTypes.number.isRequired,\n      rating: PropTypes.number.isRequired\n    }).isRequired,\n    quantity: PropTypes.number.isRequired\n  })).isRequired\n};\n\nconst mapStateToProps = state => {\n  return {\n    cart: state.cart\n  };\n};\n\nexport default connect(mapStateToProps, null)(CartContainer);","map":{"version":3,"sources":["/home/dev/Documents/shoping-cart/src/containers/CartContainer.js"],"names":["React","Component","connect","Carts","Cart","Message","PropTypes","CartContainer","showCart","cart","result","MSG_CART_EMPTY","length","map","index","render","props","propTypes","arrayOf","shape","product","id","number","isRequired","name","string","image","description","price","inventory","rating","quantity","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAO,KAAKC,OAAZ,MAAyB,wBAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,aAAN,SAA4BN,SAA5B,CAAsC;AAAA;AAAA;;AAAA,SASlCO,QATkC,GAStBC,IAAD,IAAU;AACjB,UAAIC,MAAM,GAAGL,OAAO,CAACM,cAArB;;AACA,UAAIF,IAAI,CAACG,MAAL,GAAc,CAAlB,EAAqB;AACjBF,QAAAA,MAAM,GAAGD,IAAI,CAACI,GAAL,CAAS,CAACJ,IAAD,EAAOK,KAAP,KAAiB;AAC/B,iBACI,oBAAC,IAAD;AACI,YAAA,GAAG,EAAEA,KADT;AAEI,YAAA,IAAI,EAAEL,IAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH,SAPQ,CAAT;AAQH;;AACD,aAAOC,MAAP;AACH,KAtBiC;AAAA;;AAClCK,EAAAA,MAAM,GAAG;AAAA,QACCN,IADD,GACU,KAAKO,KADf,CACCP,IADD;AAEL,WACI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM,KAAKD,QAAL,CAAcC,IAAd,CADN,CADJ;AAKH;;AARiC;;AAyBtCF,aAAa,CAACU,SAAd,GAA0B;AACtBR,EAAAA,IAAI,EAAEH,SAAS,CAACY,OAAV,CAAkBZ,SAAS,CAACa,KAAV,CAAgB;AACpCC,IAAAA,OAAO,EAAEd,SAAS,CAACa,KAAV,CAAgB;AACrBE,MAAAA,EAAE,EAAGf,SAAS,CAACgB,MAAV,CAAiBC,UADD;AAErBC,MAAAA,IAAI,EAAGlB,SAAS,CAACmB,MAAV,CAAiBF,UAFH;AAGrBG,MAAAA,KAAK,EAAGpB,SAAS,CAACmB,MAAV,CAAiBF,UAHJ;AAIrBI,MAAAA,WAAW,EAAErB,SAAS,CAACmB,MAAV,CAAiBF,UAJT;AAKrBK,MAAAA,KAAK,EAAGtB,SAAS,CAACgB,MAAV,CAAiBC,UALJ;AAMrBM,MAAAA,SAAS,EAAGvB,SAAS,CAACgB,MAAV,CAAiBC,UANR;AAOrBO,MAAAA,MAAM,EAAGxB,SAAS,CAACgB,MAAV,CAAiBC;AAPL,KAAhB,EAQNA,UATiC;AAUpCQ,IAAAA,QAAQ,EAAEzB,SAAS,CAACgB,MAAV,CAAiBC;AAVS,GAAhB,CAAlB,EAWFA;AAZkB,CAA1B;;AAeA,MAAMS,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHxB,IAAAA,IAAI,EAAEwB,KAAK,CAACxB;AADT,GAAP;AAGH,CAJD;;AAMA,eAAeP,OAAO,CAAC8B,eAAD,EAAkB,IAAlB,CAAP,CAA+BzB,aAA/B,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport Carts from \"./../components/Carts\";\nimport Cart from \"./../components/Cart\";\nimport * as Message from \"./../constants/Message\";\nimport PropTypes from \"prop-types\";\n\nclass CartContainer extends Component {\n    render() {\n        var { cart } = this.props;\n        return (\n            <Carts>\n                { this.showCart(cart) }\n            </Carts>\n        );\n    }\n    showCart = (cart) => {\n        var result = Message.MSG_CART_EMPTY;\n        if (cart.length > 0) {\n            result = cart.map((cart, index) => {\n                return (\n                    <Cart \n                        key={index} \n                        cart={cart}\n                    />\n                    )\n            });\n        }\n        return result;\n    }\n}\n\nCartContainer.propTypes = {\n    cart: PropTypes.arrayOf(PropTypes.shape({\n        product: PropTypes.shape({\n            id : PropTypes.number.isRequired,\n            name : PropTypes.string.isRequired,\n            image : PropTypes.string.isRequired,\n            description: PropTypes.string.isRequired,\n            price : PropTypes.number.isRequired,\n            inventory : PropTypes.number.isRequired,\n            rating : PropTypes.number.isRequired    \n        }).isRequired,\n        quantity: PropTypes.number.isRequired\n    })).isRequired\n}\n\nconst mapStateToProps = state => {\n    return {\n        cart: state.cart\n    }\n}\n\nexport default connect(mapStateToProps, null)(CartContainer);\n"]},"metadata":{},"sourceType":"module"}